# Multi-stage build: install deps and build, then serve with nginx for smaller runtime image
FROM node:20-alpine AS builder
WORKDIR /app

# Copy package files and install dependencies
# This leverages Docker's layer caching by copying package files first.
COPY package.json package-lock.json* ./
RUN npm ci --legacy-peer-deps

# Copy the rest of the application source code
# Assumes a .dockerignore file is present to exclude unnecessary files.
COPY . .

# Build the application
RUN npm run build

# Runtime image
FROM nginx:alpine AS runtime
WORKDIR /usr/share/nginx/html

# Copy built static assets from builder stage
COPY --from=builder /app/dist .

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]