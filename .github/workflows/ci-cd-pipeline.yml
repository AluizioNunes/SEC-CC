name: CI/CD Pipeline - SEC Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'
  DOCKER_BUILDKIT: 1

jobs:
  # Security and Code Quality
  security-scan:
    name: Security Scan & Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run Python Security Scan (Bandit)
        run: |
          bandit -r Backend/FastAPI/app/ -f json -o bandit-report.json || true
          bandit -r Backend/NestJS/src/ -f json -o bandit-nestjs-report.json || true

      - name: Run Safety (Python dependencies)
        run: |
          cd Backend/FastAPI && safety check --json || true
          cd Backend/NestJS && safety check --json || true

      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-report.json
        if: always()

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          config-file: ./.github/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd Backend/FastAPI && pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run Python tests
        run: |
          cd Backend/FastAPI && python -m pytest --cov=app --cov-report=xml --cov-report=html

      - name: Run Node.js tests
        run: |
          cd Backend/NestJS && npm test -- --coverage --coverageReporters=lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and scan Docker images
        run: |
          # Build frontend
          docker build -f docker/frontend/Dockerfile -t sec-frontend:${{ github.sha }} .

          # Build FastAPI
          docker build -f Backend/FastAPI/Dockerfile -t sec-fastapi:${{ github.sha }} .

          # Build NestJS
          docker build -f Backend/NestJS/Dockerfile -t sec-nestjs:${{ github.sha }} .

      - name: Scan images with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: |
            sec-frontend:${{ github.sha }}
            sec-fastapi:${{ github.sha }}
            sec-nestjs:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        if: always()

      - name: Test Docker images
        run: |
          # Test frontend
          docker run --rm -d -p 3000:80 --name test-frontend sec-frontend:${{ github.sha }}
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          docker stop test-frontend

          # Test FastAPI
          docker run --rm -d -p 8000:8000 --name test-fastapi sec-fastapi:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-fastapi

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, kubectl, docker-compose, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run production tests
        run: |
          echo "Running production smoke tests..."
          # Add production-specific tests

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

      - name: Post-deployment verification
        run: |
          echo "Verifying deployment..."
          # Add health checks and verification steps

  # Security Monitoring
  security-monitoring:
    name: Security Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          echo "Running security audit..."
          # Check for secrets, vulnerabilities, etc.

      - name: Send security report
        run: |
          echo "Sending security report to team..."
          # Add notification logic (Slack, email, etc.)
