"""
NGINX Configuration with Redis Integration
Advanced proxy caching, rate limiting, and load balancing
"""

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Rate limiting zone (Redis-backed)
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=10r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Upstream servers with Redis load balancing
    upstream backend_fastapi {
        # Redis-based load balancing (would use lua script in production)
        server fastapi:8000 weight=3;
        server nestjs:3000 weight=2;
        keepalive 32;
    }

    upstream backend_nestjs {
        server nestjs:3000 weight=2;
        server fastapi:8000 weight=1;
        keepalive 32;
    }

    # Redis connection for advanced features
    # (In production, this would connect to Redis for dynamic configuration)
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict configuration 10m;
    lua_shared_dict rate_limiting 10m;

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Root location
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL configuration (in production)
        # ssl_certificate /etc/ssl/certs/server.crt;
        # ssl_certificate_key /etc/ssl/private/server.key;
        # ssl_protocols TLSv1.2 TLSv1.3;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Redis-backed feature flags
        location /api/feature-flags {
            # Check Redis for feature flags (would use Lua script)
            proxy_pass http://fastapi:8000/redis-advanced/feature-flags;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # API endpoints with Redis caching
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;

            # Connection limiting
            limit_conn conn_limit 100;

            # Proxy to FastAPI/NestJS
            proxy_pass http://backend_fastapi;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Cache configuration (Redis-backed)
            proxy_cache redis_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

            # Cache headers
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Authentication endpoints
        location /auth/ {
            limit_req zone=login burst=5 nodelay;

            proxy_pass http://backend_nestjs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static assets with Redis caching
        location ~* \.(css|js|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot|ico)$ {
            # Cache static assets
            expires 1y;
            add_header Cache-Control "public, immutable";

            # Try local files first, then Redis cache
            try_files $uri @redis_assets;

            # Fallback to Redis cache
            location @redis_assets {
                # Redis asset serving (would use Lua script)
                proxy_pass http://fastapi:8000/redis-advanced/assets;
                proxy_set_header Host $host;
            }
        }

        # WebSocket connections for real-time features
        location /ws/ {
            proxy_pass http://backend_fastapi;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_read_timeout 86400;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Monitoring endpoints (no caching)
        location /metrics {
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Grafana (no caching for dashboards)
        location /grafana/ {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-WEBAUTH-USER $remote_user;
        }

        # Prometheus UI
        location /prometheus/ {
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
        }

        # Loki API
        location /loki/ {
            proxy_pass http://loki:3100;
            proxy_set_header Host $host;
        }
    }

    # Cache zones
    proxy_cache_path /var/cache/nginx/redis levels=1:2 keys_zone=redis_cache:10m max_size=1g
                     inactive=60m use_temp_path=off;

    # Redis-backed rate limiting (Lua script integration)
    # In production, this would include Lua scripts for Redis integration

    # Logging format with Redis metadata
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
}
