"""
NGINX Configuration with Advanced Geographic Load Balancing
Redis-backed geographic routing, latency optimization, and global traffic management
"""

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Redis connection for dynamic configuration
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict configuration 10m;
    lua_shared_dict geo_cache 10m;
    lua_shared_dict metrics 10m;

    # Geographic data (Redis-backed)
    geoip_country /usr/share/GeoIP/GeoIP.dat;
    geoip_city /usr/share/GeoIP/GeoLiteCity.dat;

    # Rate limiting (Redis-backed)
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $geoip_country_code zone=country:10m rate=50r/s;
    limit_req_zone $geoip_city zone=city:10m rate=25r/s;

    # Connection limiting with geographic awareness
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    limit_conn_zone $geoip_country_code zone=country_conn:10m;

    # Upstream servers with geographic load balancing
    upstream backend_fastapi_na {
        # North America servers
        server fastapi-na-1:8000 weight=3;
        server fastapi-na-2:8000 weight=2;
        server nestjs-na-1:3000 weight=1;
        keepalive 32;
    }

    upstream backend_fastapi_eu {
        # Europe servers
        server fastapi-eu-1:8000 weight=3;
        server fastapi-eu-2:8000 weight=2;
        server nestjs-eu-1:3000 weight=1;
        keepalive 32;
    }

    upstream backend_fastapi_asia {
        # Asia servers
        server fastapi-asia-1:8000 weight=3;
        server fastapi-asia-2:8000 weight=2;
        server nestjs-asia-1:3000 weight=1;
        keepalive 32;
    }

    upstream backend_fastapi_global {
        # Global load balancer (Redis-backed)
        server fastapi:8000 weight=5;
        server nestjs:3000 weight=3;
        keepalive 32;
    }

    # Redis-backed dynamic configuration
    init_by_lua_block {
        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeout(1000)

        local ok, err = red:connect("redis", 6379)
        if not ok then
            ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
            return
        end

        -- Load geographic routing configuration
        local geo_config, err = red:get("nginx:geo_config")
        if geo_config then
            ngx.shared.configuration:set("geo_config", geo_config)
        end

        -- Load rate limiting configuration
        local rate_config, err = red:get("nginx:rate_limits")
        if rate_config then
            ngx.shared.configuration:set("rate_limits", rate_config)
        end

        -- Close Redis connection
        local ok, err = red:close()
    }

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Geographic routing for root
        location / {
            # Redis-backed geographic routing
            set $geo_region "";

            if ($geoip_country_code ~* "^(US|CA|MX)$") {
                set $geo_region "na";
            }

            if ($geoip_country_code ~* "^(GB|DE|FR|IT|ES|NL|BE|AT|CH|SE|NO|DK|FI|PL|CZ|HU|RO|BG|GR|PT)$") {
                set $geo_region "eu";
            }

            if ($geoip_country_code ~* "^(CN|JP|KR|IN|SG|HK|TW|TH|VN|MY|ID|PH|AU|NZ)$") {
                set $geo_region "asia";
            }

            # Default to global if no region match
            if ($geo_region = "") {
                set $geo_region "global";
            }

            # Route to appropriate backend
            location /api/ {
                # Geographic load balancing
                if ($geo_region = "na") {
                    proxy_pass http://backend_fastapi_na;
                }
                if ($geo_region = "eu") {
                    proxy_pass http://backend_fastapi_eu;
                }
                if ($geo_region = "asia") {
                    proxy_pass http://backend_fastapi_asia;
                }
                # Default to global
                proxy_pass http://backend_fastapi_global;

                # Common proxy settings
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Geo-Region $geo_region;
                proxy_set_header X-Geo-Country $geoip_country_code;
                proxy_set_header X-Geo-City $geoip_city;
                proxy_cache_bypass $http_upgrade;

                # Redis-backed caching
                proxy_cache redis_cache;
                proxy_cache_key "$scheme$request_method$host$request_uri$geo_region";
                proxy_cache_valid 200 302 10m;
                proxy_cache_valid 404 1m;
                proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

                # Cache headers
                add_header X-Cache-Status $upstream_cache_status;
                add_header X-Geo-Region $geo_region;
            }

            # Static assets with geographic caching
            location ~* \.(css|js|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot|ico)$ {
                # Geographic asset caching
                expires 1y;
                add_header Cache-Control "public, immutable";

                # Route to nearest CDN/edge
                if ($geo_region = "na") {
                    proxy_pass http://cdn-na.example.com;
                }
                if ($geo_region = "eu") {
                    proxy_pass http://cdn-eu.example.com;
                }
                if ($geo_region = "asia") {
                    proxy_pass http://cdn-asia.example.com;
                }

                # Fallback to local with Redis cache
                proxy_pass http://fastapi:8000/redis-advanced/assets;
                proxy_set_header Host $host;
            }

            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL configuration (in production)
        # ssl_certificate /etc/ssl/certs/server.crt;
        # ssl_certificate_key /etc/ssl/private/server.key;
        # ssl_protocols TLSv1.2 TLSv1.3;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Redis-backed feature flags
        location /api/feature-flags {
            # Dynamic feature flags from Redis
            proxy_pass http://fastapi:8000/redis-advanced/feature-flags;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Geo-Region $geoip_country_code;
        }

        # API endpoints with advanced geographic routing
        location /api/ {
            # Geographic and latency-based routing
            set $target_backend "";

            # Check Redis for optimal backend based on latency
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(100)
                local ok, err = red:connect("redis", 6379)
                if ok then
                    -- Get latency data for different regions
                    local na_latency = red:get("latency:na") or "100"
                    local eu_latency = red:get("latency:eu") or "150"
                    local asia_latency = red:get("latency:asia") or "200"

                    -- Route based on geographic location and latency
                    if ngx.var.geoip_country_code:match("^(US|CA|MX)$") and tonumber(na_latency) < 200 then
                        ngx.var.target_backend = "na"
                    elseif ngx.var.geoip_country_code:match("^(GB|DE|FR|IT|ES|NL|BE|AT|CH|SE|NO|DK|FI|PL|CZ|HU|RO|BG|GR|PT)$") and tonumber(eu_latency) < 250 then
                        ngx.var.target_backend = "eu"
                    elseif ngx.var.geoip_country_code:match("^(CN|JP|KR|IN|SG|HK|TW|TH|VN|MY|ID|PH|AU|NZ)$") and tonumber(asia_latency) < 300 then
                        ngx.var.target_backend = "asia"
                    else
                        ngx.var.target_backend = "global"
                    end

                    red:close()
                else
                    ngx.var.target_backend = "global"
                end
            }

            # Route to appropriate backend based on Redis latency data
            if ($target_backend = "na") {
                proxy_pass http://backend_fastapi_na;
            }
            if ($target_backend = "eu") {
                proxy_pass http://backend_fastapi_eu;
            }
            if ($target_backend = "asia") {
                proxy_pass http://backend_fastapi_asia;
            }
            # Default to global
            proxy_pass http://backend_fastapi_global;

            # Enhanced proxy settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Geo-Region $geoip_country_code;
            proxy_set_header X-Geo-City $geoip_city;
            proxy_set_header X-Target-Backend $target_backend;
            proxy_cache_bypass $http_upgrade;

            # Redis-backed intelligent caching
            proxy_cache redis_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri$geoip_country_code";
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

            # Cache headers
            add_header X-Cache-Status $upstream_cache_status;
            add_header X-Geo-Region $geoip_country_code;
            add_header X-Target-Backend $target_backend;
        }

        # Authentication with geographic restrictions
        location /auth/ {
            # Geographic access control via Redis
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(100)
                local ok, err = red:connect("redis", 6379)
                if ok then
                    local allowed_countries = red:smembers("auth:allowed_countries")
                    local user_country = ngx.var.geoip_country_code

                    local is_allowed = false
                    for _, country in ipairs(allowed_countries) do
                        if country == user_country then
                            is_allowed = true
                            break
                        end
                    end

                    if not is_allowed then
                        ngx.exit(403)
                    end

                    red:close()
                end
            }

            limit_req zone=login burst=5 nodelay;

            proxy_pass http://backend_nestjs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket connections for real-time features
        location /ws/ {
            proxy_pass http://backend_fastapi;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Geo-Region $geoip_country_code;
            proxy_read_timeout 86400;
        }

        # Health check endpoint with geographic info
        location /health {
            access_log off;
            return 200 "healthy - region: $geoip_country_code\n";
            add_header Content-Type text/plain;
        }

        # Metrics endpoint for monitoring
        location /nginx-metrics {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            deny all;
        }
    }

    # Enhanced cache zones
    proxy_cache_path /var/cache/nginx/redis levels=1:2 keys_zone=redis_cache:10m max_size=1g
                     inactive=60m use_temp_path=off;

    # Lua scripts for Redis integration (would be in /etc/nginx/lua/)
    # geo_routing.lua - Geographic routing logic
    # latency_monitoring.lua - Latency tracking
    # rate_limiting.lua - Dynamic rate limiting

    # Logging format with geographic and Redis metadata
    log_format geo_main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'geo="$geoip_country_code:$geoip_city" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time" '
                        'backend="$target_backend" cache="$upstream_cache_status"';

    access_log /var/log/nginx/access.log geo_main;

    # Gzip compression with geographic optimization
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Geographic compression levels
    gzip_comp_level 6;
    if ($geoip_country_code ~* "^(CN|IN|BR|RU)$") {
        gzip_comp_level 3;  # Lower compression for slower connections
    }
}
