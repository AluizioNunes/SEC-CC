services:
  nginx:
    image: nginx:alpine
    container_name: CC-NGINX
    ports:
      - "80:80"
    networks:
      - sec_net

  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    container_name: CC-FRONTEND
    volumes:
      - frontend_dist:/app/dist
    ports:
      - "5173:80"
    networks:
      - sec_net

  fastapi:
    build:
      context: ./Backend/FastAPI
      dockerfile: Dockerfile
    container_name: CC-FASTAPI
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      MONGODB_URL: ${MONGODB_URL}
      REDIS_URL: ${REDIS_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      LOG_LEVEL: ${FASTAPI_LOG_LEVEL:-info}
    ports:
      - "8000:8000"
    networks:
      - sec_net

  nestjs:
    build:
      context: ./Backend/NestJS
      dockerfile: Dockerfile
    container_name: CC-NESTJS
    environment:
      PORT: ${NESTJS_PORT:-3000}
      POSTGRES_URL: ${POSTGRES_URL}
      MONGODB_URL: ${MONGODB_URL}
      REDIS_URL: ${REDIS_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    ports:
      - "3000:3000"
    networks:
      - sec_net

  postgres:
    image: postgres:17.6-alpine
    container_name: CC-POSTGRESQL
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sec_net

  redis:
    image: redis:latest
    container_name: CC-REDIS
    ports:
      - "6379:6379"
    networks:
      - sec_net

  grafana:
    image: grafana/grafana:latest
    container_name: CC-GRAFANA
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sec_net

  mongodb:
    image: mongo:latest
    container_name: CC-MONGODB
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - sec_net

  prometheus:
    image: prom/prometheus:latest
    container_name: CC-PROMETHEUS
    environment:
      - PROMETHEUS_CONFIG_FILE=/etc/prometheus/prometheus.yml
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - sec_net

  loki:
    image: grafana/loki:2.9.8
    container_name: CC-LOKI
    environment:
      - LOKI_CONFIG_FILE=/etc/loki/config.yml
    configs:
      - source: loki_config
        target: /etc/loki/config.yml
    ports:
      - "3100:3100"
    networks:
      - sec_net

  promtail:
    image: grafana/promtail:2.9.8
    container_name: CC-PROMTAIL
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PROMTAIL_CONFIG_FILE=/etc/promtail/config.yml
    configs:
      - source: promtail_config
        target: /etc/promtail/config.yml
    ports:
      - "9080:9080"
    networks:
      - sec_net

networks:
  sec_net:
    driver: bridge

volumes:
  frontend_dist:
  postgres_data:
  mongo_data:
  grafana_data:

configs:
  promtail_config:
    content: |
      server:
        http_listen_port: 9080
        grpc_listen_port: 0
      
      positions:
        filename: /tmp/positions.yaml
      
      clients:
        - url: http://loki:3100/loki/api/v1/push
      
      scrape_configs:
        - job_name: system
          static_configs:
            - targets:
                - localhost
              labels:
                job: varlogs
                __path__: /var/log/*.log

  prometheus_config:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      
      rule_files:
        # - "first_rules.yml"
        # - "second_rules.yml"
      
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
      
        - job_name: 'loki'
          static_configs:
            - targets: ['loki:3100']
          metrics_path: '/metrics'
      
        - job_name: 'grafana'
          static_configs:
            - targets: ['grafana:3000']
      
        - job_name: 'fastapi'
          static_configs:
            - targets: ['fastapi:8000']
          metrics_path: '/metrics'
      
        - job_name: 'nestjs'
          static_configs:
            - targets: ['nestjs:3000']
          metrics_path: '/metrics'

  loki_config:
    content: |
      auth_enabled: false

      server:
        http_listen_port: 3100
        grpc_listen_port: 9096

      common:
        instance_addr: 127.0.0.1
        path_prefix: /tmp/loki
        storage:
          filesystem:
            chunks_directory: /tmp/loki/chunks
            rules_directory: /tmp/loki/rules
        replication_factor: 1
        ring:
          kvstore:
            store: inmemory

      query_range:
        results_cache:
          cache:
            embedded_cache:
              enabled: true
              max_size_mb: 100

      schema_config:
        configs:
          - from: 2020-10-24
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h

      ruler:
        alertmanager_url: http://localhost:9093

      ingester:
        lifecycler:
          address: 127.0.0.1
          ring:
            kvstore:
              store: inmemory
            replication_factor: 1
          final_sleep: 0s
        chunk_idle_period: 5m
        max_chunk_age: 1h
        chunk_target_size: 1048576
        chunk_retain_period: 30s
        max_transfer_retries: 0

      limits_config:
        reject_old_samples: true
        reject_old_samples_max_age: 168h
