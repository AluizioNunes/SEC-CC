services:
  nginx:
    image: nginx:alpine
    container_name: CC-NGINX
    ports:
      - "80:80"
    networks:
      - sec_net

  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    container_name: CC-FRONTEND
    volumes:
      - frontend_dist:/app/dist
    networks:
      - sec_net

  fastapi:
    build:
      context: ./Backend/FastAPI
      dockerfile: Dockerfile
    container_name: CC-FASTAPI
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      MONGODB_URL: ${MONGODB_URL}
      REDIS_URL: ${REDIS_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      LOG_LEVEL: ${FASTAPI_LOG_LEVEL:-info}
    ports:
      - "8000:8000"
    networks:
      - sec_net

  nestjs:
    build:
      context: ./Backend/NestJS
      dockerfile: Dockerfile
    container_name: CC-NESTJS
    environment:
      PORT: ${NESTJS_PORT:-3000}
      POSTGRES_URL: ${POSTGRES_URL}
      MONGODB_URL: ${MONGODB_URL}
      REDIS_URL: ${REDIS_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    ports:
      - "3000:3000"
    networks:
      - sec_net

  postgres:
    image: postgres:17.6-alpine
    container_name: CC-POSTGRESQL
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sec_net

  redis:
    image: redis:latest
    container_name: CC-REDIS
    ports:
      - "6379:6379"
    networks:
      - sec_net

  grafana:
    image: grafana/grafana:latest
    container_name: CC-GRAFANA
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sec_net

  mongodb:
    image: mongo:latest
    container_name: CC-MONGODB
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - sec_net

  prometheus:
    image: prom/prometheus:latest
    container_name: CC-PROMETHEUS
    volumes:
      - ./docker/prometheus/prometheus.yml:/tmp/prometheus.yml:ro
    command: ["sh", "-c", "cp /tmp/prometheus.yml /etc/prometheus/prometheus.yml && prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/etc/prometheus/console_libraries --web.console.templates=/etc/prometheus/consoles"]
    ports:
      - "9090:9090"
    networks:
      - sec_net

  loki:
    image: grafana/loki:2.9.8
    container_name: CC-LOKI
    command: ["-config.file=/etc/loki/config.yml"]
    volumes:
      - type: bind
        source: ./docker/loki/loki-config.yml
        target: /etc/loki/config.yml
        read_only: true
    ports:
      - "3100:3100"
    networks:
      - sec_net

  promtail:
    image: grafana/promtail:2.9.8
    container_name: CC-PROMTAIL
    command: ["sh", "-c", "cp /tmp/promtail-config.yml /etc/promtail/config.yml && /usr/bin/promtail -config.file=/etc/promtail/config.yml"]
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/promtail/promtail-config.yml:/tmp/promtail-config.yml:ro
    networks:
      - sec_net

networks:
  sec_net:
    driver: bridge

volumes:
  frontend_dist:
  postgres_data:
  mongo_data:
  grafana_data:
  prometheus_config:
