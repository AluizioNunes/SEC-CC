services:
  # ========== NGINX PROXY ==========
  nginx:
    image: nginx:1.25-alpine
    container_name: CC-NGINX
    ports:
      - "80:80"
      - "8080:80"
    restart: unless-stopped
    volumes:
      - ./Docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./Docker/nginx/html:/usr/share/nginx/html:ro
    networks:
      - sec_net
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== FRONTEND REACT ==========
  frontend:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
    container_name: CC-FRONTEND
    ports:
      - "5173:80"
    environment:
      - NODE_ENV=development
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========== FASTAPI BACKEND ==========
  fastapi:
    build:
      context: ./Backend/FastAPI
      dockerfile: Dockerfile
    container_name: CC-FASTAPI
    ports:
      - "8000:8000"
    networks:
      - sec_net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SERVICE_NAME=fastapi
      - HOST=fastapi
      - PORT=8000
      - REDIS_URL=redis://:redispassword2024@redis:6379/0
      - DATABASE_URL=postgresql+asyncpg://sec:secpass2024@postgres:5432/secdb
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=sec
      - POSTGRES_PASSWORD=secpass2024
      - POSTGRES_DB=secdb
      - MONGODB_URL=mongodb://mongodb:27017/secmongo
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport sys, urllib.request\ntry:\n    with urllib.request.urlopen('http://localhost:8000/health/live', timeout=5) as r:\n        sys.exit(0 if r.status == 200 else 1)\nexcept Exception:\n    sys.exit(1)\nPY"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ========== NESTJS BACKEND ==========
  nestjs:
    build:
      context: ./Backend/NestJS
      dockerfile: Dockerfile
    container_name: CC-NESTJS
    ports:
      - "3000:3000"
    networks:
      - sec_net
    # depends_on removido para evitar conflito de container name com serviços já existentes
    # NestJS assume que os serviços estão acessíveis pelos hostnames na rede

    environment:
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword2024
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=sec
      - POSTGRES_PASSWORD=secpass2024
      - POSTGRES_DB=secdb
      - MONGODB_HOST=mongodb
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ========== REDIS CACHE ==========
  redis:
    image: redis:latest
    container_name: CC-REDIS
    ports:
      - "6380:6379"
    command: redis-server --requirepass redispassword2024
    restart: unless-stopped
    networks:
      - sec_net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispassword2024", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========== RABBITMQ ==========
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: CC-RABBITMQ
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== POSTGRESQL DATABASE ==========
  postgres:
    image: postgres:17.6-alpine
    container_name: CC-POSTGRESQL
    environment:
      POSTGRES_USER: sec
      POSTGRES_PASSWORD: secpass2024
      POSTGRES_DB: secdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Docker/postgres/init.sql:/docker-entrypoint-initdb.d/001_init.sql
    ports:
      - "5432:5432"
    networks:
      - sec_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sec -d secdb"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== MONGODB DATABASE ==========
  mongodb:
    image: mongo:latest
    container_name: CC-MONGODB
    environment:
      MONGO_INITDB_DATABASE: secmongo
      MONGO_INITDB_ROOT_USERNAME: secmongo
      MONGO_INITDB_ROOT_PASSWORD: mongopass2024
    volumes:
      - mongo_data:/data/db
    ports:
      - "27018:27017"
    networks:
      - sec_net
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:27017/secmongo --quiet
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== PROMETHEUS ==========
  prometheus:
    image: prom/prometheus:latest
    container_name: CC-PROMETHEUS
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./Docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:9090/-/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== GRAFANA ==========
  grafana:
    image: grafana/grafana:10.4.2
    container_name: CC-GRAFANA
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./Docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./Docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== LOKI ==========
  loki:
    image: grafana/loki:2.9.4
    container_name: CC-LOKI
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./Docker/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_data:/loki
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3100/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== PROMTAIL ==========
  promtail:
    image: grafana/promtail:2.9.4
    container_name: CC-PROMTAIL
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - ./Docker/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    networks:
      - sec_net
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped

  # ========== TEMPO ==========
  tempo:
    image: grafana/tempo:2.3.0
    container_name: CC-TEMPO
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    command: -config.file=/etc/tempo/tempo-config.yaml
    volumes:
      - ./Docker/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml:ro
      - tempo_data:/var/tempo
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3200/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== CADVISOR ==========
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: CC-CADVISOR
    ports:
      - "8081:8080"
    networks:
      - sec_net
    restart: unless-stopped
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:8080/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

networks:
  sec_net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
  loki_data:
  tempo_data:
