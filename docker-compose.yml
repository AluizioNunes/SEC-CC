version: '3.8'

services:
  # ========== NGINX PROXY ==========
  nginx:
    image: nginx:1.25-alpine
    container_name: CC-NGINX
    ports:
      - "80:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========== FRONTEND REACT ==========
  frontend:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
    container_name: CC-FRONTEND
    ports:
      - "5173:80"
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========== FASTAPI BACKEND ==========
  fastapi:
    build:
      context: ./Backend/FastAPI
      dockerfile: Dockerfile
    container_name: CC-FASTAPI
    ports:
      - "8000:8000"
    networks:
      - sec_net
    depends_on:
      - redis
    environment:
      - SERVICE_NAME=fastapi
      - HOST=fastapi
      - PORT=8000
      - REDIS_URL=redis://:redispassword2024@redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ========== REDIS CACHE ==========
  redis:
    image: redis:latest
    container_name: CC-REDIS
    ports:
      - "6379:6379"
    command: redis-server --requirepass redispassword2024
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========== POSTGRESQL DATABASE ==========
  postgres:
    image: postgres:17.6-alpine
    container_name: CC-POSTGRESQL
    environment:
      POSTGRES_USER: sec
      POSTGRES_PASSWORD: secpass2024
      POSTGRES_DB: secdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sec_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sec -d secdb"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== MONGODB DATABASE ==========
  mongodb:
    image: mongo:latest
    container_name: CC-MONGODB
    environment:
      MONGO_INITDB_DATABASE: secmongo
      MONGO_INITDB_ROOT_USERNAME: secmongo
      MONGO_INITDB_ROOT_PASSWORD: mongopass2024
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - sec_net
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:27017/secmongo --quiet
      interval: 15s
      timeout: 5s
      retries: 3

networks:
  sec_net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
