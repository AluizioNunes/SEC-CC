services:
  # ========== NGINX PROXY ==========
  nginx:
    image: nginx:1.25-alpine
    container_name: CC-NGINX
    ports:
      - "80:80"
    restart: unless-stopped
    environment:
      NGINX_CONF: |
        server {
            listen 80;
            listen [::]:80;
            server_name localhost;
            root /usr/share/nginx/html;
            resolver 127.0.0.11 ipv6=on valid=10s;

            set $$frontend_upstream "frontend:80";
            set $$fastapi_upstream "fastapi:8000";
            set $$nestjs_upstream "nestjs:3000";
            set $$n8n_upstream "n8n:5678";

            location = /status {
                root /usr/share/nginx/html;
                try_files /status.html =404;
            }

            location / {
                proxy_pass http://$$frontend_upstream;
                proxy_set_header Host $$host;
                proxy_set_header X-Real-IP $$remote_addr;
                proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $$scheme;
                proxy_set_header X-Forwarded-Host $$server_name;
                proxy_set_header X-Forwarded-Port $$server_port;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $$http_upgrade;
                proxy_set_header Connection "upgrade";
            }

            location /api/v1/ {
                rewrite ^/api/v1/(.*)$$ /$$1 break;
                proxy_pass http://$$fastapi_upstream;
                proxy_set_header Host $$host;
                proxy_set_header X-Real-IP $$remote_addr;
                proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $$scheme;
            }

            location /api/v2/ {
                rewrite ^/api/v2/(.*)$$ /$$1 break;
                proxy_pass http://$$nestjs_upstream;
                proxy_set_header Host $$host;
                proxy_set_header X-Real-IP $$remote_addr;
                proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $$scheme;
            }

            location /n8n/ {
                rewrite ^/n8n/(.*)$$ /$$1 break;
                proxy_pass http://$$n8n_upstream;
                proxy_set_header Host $$host;
                proxy_set_header X-Real-IP $$remote_addr;
                proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $$scheme;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $$http_upgrade;
                proxy_set_header Connection "upgrade";
            }
        }
    command: ["/bin/sh","-lc","printf '%s' \"$${NGINX_CONF}\" > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;' "]
    networks:
      - sec_net
    depends_on:
      frontend:
        condition: service_healthy
      fastapi:
        condition: service_healthy
      nestjs:
        condition: service_healthy
      n8n:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== FRONTEND REACT ==========
  frontend:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
    container_name: CC-FRONTEND
    ports:
      - "5173:80"
    environment:
      - NODE_ENV=development
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ========== FASTAPI BACKEND ==========
  fastapi:
    build:
      context: ./
      dockerfile: Backend/FastAPI/Dockerfile
    container_name: CC-FASTAPI
    ports:
      - "8000:8000"
    networks:
      - sec_net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SERVICE_NAME=fastapi
      - HOST=fastapi
      - PORT=8000
      - FASTAPI_LOG_LEVEL=${FASTAPI_LOG_LEVEL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS}
      - REDIS_URL=${REDIS_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DATABASE_URL=${FASTAPI_DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MONGODB_URL=${MONGODB_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_ADMIN_USER=${RABBITMQ_ADMIN_USER}
      - RABBITMQ_ADMIN_PASSWORD=${RABBITMQ_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport sys, urllib.request\ntry:\n    with urllib.request.urlopen('http://localhost:8000/health/live', timeout=5) as r:\n        sys.exit(0 if r.status == 200 else 1)\nexcept Exception:\n    sys.exit(1)\nPY"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ========== NESTJS BACKEND ==========
  nestjs:
    build:
      context: ./Backend/NestJS
      dockerfile: Dockerfile
    container_name: CC-NESTJS
    ports:
      - "3000:3000"
    networks:
      - sec_net
    environment:
      - PORT=${NESTJS_PORT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_DB=${MONGODB_DB}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_AUTH_SOURCE=${MONGODB_AUTH_SOURCE}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_ADMIN_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3000/health > /dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ========== N8N (Workflows) ==========
  n8n:
    image: n8nio/n8n:latest
    container_name: CC-N8N
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_BASE_URL=/n8n
      - N8N_EDITOR_BASE_URL=http://localhost/n8n/
      - WEBHOOK_URL=http://localhost/n8n/
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-America/Sao_Paulo}
      - TZ=${TZ:-America/Sao_Paulo}
      - EXECUTIONS_MODE=${EXECUTIONS_MODE:-regular}
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=${EXECUTIONS_DATA_SAVE_ON_SUCCESS:-none}
      - EXECUTIONS_DATA_SAVE_ON_ERROR=${EXECUTIONS_DATA_SAVE_ON_ERROR:-all}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:5678/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== REDIS CACHE ==========
  redis:
    image: redis:latest
    container_name: CC-REDIS
    ports:
      - "6380:6379"
    command: ["bash","-lc","redis-server --requirepass ${REDIS_PASSWORD}"]
    restart: unless-stopped
    networks:
      - sec_net
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $REDIS_PASSWORD --raw ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========== RABBITMQ ==========
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: CC-RABBITMQ
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_ADMIN_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_ADMIN_PASSWORD:-admin123}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,info}]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c 'until rabbitmq-diagnostics check_running; do sleep 1; done' && rabbitmq-diagnostics check_port_connectivity"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s

  # ========== POSTGRESQL DATABASE ==========
  postgres:
    image: postgres:17.6-alpine
    container_name: CC-POSTGRESQL
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Backend/Scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ========== MONGODB DATABASE ==========
  mongodb:
    image: mongo:latest
    container_name: CC-MONGODB
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27018:27017"
    networks:
      - sec_net
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand(\"ping\").ok' localhost:27017/$MONGO_INITDB_DATABASE --quiet"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== PROMETHEUS ==========
  prometheus:
    image: prom/prometheus:latest
    container_name: CC-PROMETHEUS
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./Docker/prometheus:/etc/prometheus:ro
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:9090/-/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== GRAFANA ==========
  grafana:
    image: grafana/grafana:10.4.2
    container_name: CC-GRAFANA
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_USERS_AUTO_ASSIGN_ORG=${GF_USERS_AUTO_ASSIGN_ORG}
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=${GF_USERS_AUTO_ASSIGN_ORG_ROLE}
    volumes:
      - ./Docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./Docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== LOKI ==========
  loki:
    image: grafana/loki:2.9.4
    container_name: CC-LOKI
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./Docker/loki:/etc/loki:ro
      - loki_data:/loki
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3100/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

  # ========== PROMTAIL ==========
  promtail:
    image: grafana/promtail:2.9.4
    container_name: CC-PROMTAIL
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - ./Docker/promtail:/etc/promtail:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    networks:
      - sec_net
    depends_on:
      loki:
        condition: service_started
    restart: unless-stopped

  # ========== TEMPO ==========
  tempo:
    image: grafana/tempo:2.3.0
    container_name: CC-TEMPO
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    command: -config.file=/etc/tempo/tempo-config.yaml
    volumes:
      - ./Docker/tempo:/etc/tempo:ro
      - tempo_data:/var/tempo
    networks:
      - sec_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:3200/ready || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== CADVISOR ==========
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: CC-CADVISOR
    ports:
      - "8081:8080"
    networks:
      - sec_net
    restart: unless-stopped
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1:8080/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

networks:
  sec_net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
  loki_data:
  tempo_data:
  n8n_data:
